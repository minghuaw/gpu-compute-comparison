#version 460

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer readonly MatrixA {
    float matrix_a[];
};

layout(set = 0, binding = 1) buffer readonly MatrixB {
    float matrix_b[];
};

layout(set = 0, binding = 2) buffer writeonly MatrixC {
    float matrix_c[];
};

const uint M = 4096;
const uint N = 4096;
const uint K = 4096;

void main() {
    const uint col = gl_GlobalInvocationID.x;
    const uint row = gl_GlobalInvocationID.y;

    if (row >= M || col >= N) {
        return;
    }

    float sum = 0;
    for (uint k = 0; k < K; k++) {
        const uint a_index = row * K + k;
        const uint b_index = k * N + col;
        sum += matrix_a[a_index] * matrix_b[b_index];
    }

    const uint c_index = row * N + col;
    matrix_c[c_index] = sum;
}