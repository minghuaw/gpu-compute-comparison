#version 460

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer readonly MatrixA {
    float matrix_a[];
};

layout(set = 0, binding = 1) buffer readonly MatrixB {
    float matrix_b[];
};

layout(set = 0, binding = 2) buffer writeonly MatrixC {
    float matrix_c[];
};

const uint M = 4096;
const uint N = 4096;
const uint K = 4096;
const uint BM = 32;
const uint BN = 32;
const uint BK = 32;

shared float shared_a[BM * BK];
shared float shared_b[BK * BN];

void main() {
    uint global_a_offset = gl_WorkGroupID.y * BM * K;
    uint global_b_offset = gl_WorkGroupID.x * BN;
    uint global_c_offset = gl_WorkGroupID.y * BM * N + gl_WorkGroupID.x * BN;
    
    uint local_x = gl_LocalInvocationIndex % BN;
    uint local_y = gl_LocalInvocationIndex / BN;

    float sum = 0.0;
    for (uint k = 0; k < K; k += BK) {
        shared_a[local_y * BK + local_x] = matrix_a[global_a_offset + local_y * K + k + local_x];
        shared_b[local_y * BN + local_x] = matrix_b[global_b_offset + (local_y + k) * N + local_x];

        barrier();

        for (uint i = 0; i < BK; i++) {
            sum += shared_a[local_y * BK + i] * shared_b[i * BN + local_x];
        }
        barrier();
    }
    matrix_c[global_c_offset + local_y * N + local_x] = sum;
}