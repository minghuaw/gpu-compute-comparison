#version 460

const uint M = 4096;
const uint N = 4096;
const uint BM = 64;
const uint BN = 64;
const uint TM = 8;

layout(local_size_x = BM/TM, local_size_y = BN, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer OutputBuffer {
    float output_buffer[];
};

void main() {
    float local_buffer[TM];
    uint block_offset = gl_LocalInvocationID.x * TM;
    for (uint i = 0; i < TM; i++) {
        local_buffer[i] = 1.0; // Some non-zero value
    }
    barrier();

    uint thread_row = gl_LocalInvocationIndex / BN * TM;
    uint thread_col = gl_LocalInvocationIndex % BN;
    uint global_offset = gl_WorkGroupID.y * BM * N + gl_WorkGroupID.x * BN;
    for (uint i = 0; i < TM; i++) {
        output_buffer[global_offset + (thread_row + i) * N + thread_col] = local_buffer[i];
    }
}