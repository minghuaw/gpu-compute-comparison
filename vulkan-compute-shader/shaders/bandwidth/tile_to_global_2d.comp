#version 460

const uint M = 4096;
const uint N = 4096;
const uint BM = 64;
const uint BN = 64;
const uint TM = 8;
const uint TN = 4; // This gives the best performance 

const uint VN = N / 4; // Number of vec4s in a row
const uint VBN = BN / 4; // Number of vec4s in a block row

layout(local_size_x = BM/TM, local_size_y = BN/TN, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer OutputBuffer {
    vec4 output_buffer[];
};

void main() {
    float local_buffer[TM * TN];
    uint block_offset = gl_LocalInvocationID.x * TM;
    for (uint i = 0; i < TM * TN; i++) {
        local_buffer[i] = 1.0; // Some non-zero value
    }
    barrier();

    uint thread_row = gl_LocalInvocationIndex / (BN / TN) * TM;
    uint thread_col = (gl_LocalInvocationIndex % (BN / TN) * TN) / 4;
    uint global_offset = gl_WorkGroupID.y * BM * VN + gl_WorkGroupID.x * VBN;
    for (uint i = 0; i < TM; i++) {
        // Manual vectorization
        vec4 v = vec4(local_buffer[i*TN + 0], local_buffer[i*TN + 1], local_buffer[i*TN + 2], local_buffer[i*TN + 3]);
        output_buffer[global_offset + (thread_row + i) * VN + (thread_col + 0)] = v;
    }
}